// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: clip.proto

package clip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CLIPService_ImageEmbedding_FullMethodName = "/clip.CLIPService/ImageEmbedding"
	CLIPService_TextEmbedding_FullMethodName  = "/clip.CLIPService/TextEmbedding"
)

// CLIPServiceClient is the client API for CLIPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CLIPServiceClient interface {
	ImageEmbedding(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ImageChunk, EmbeddingResponse], error)
	TextEmbedding(ctx context.Context, in *Text, opts ...grpc.CallOption) (*EmbeddingResponse, error)
}

type cLIPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCLIPServiceClient(cc grpc.ClientConnInterface) CLIPServiceClient {
	return &cLIPServiceClient{cc}
}

func (c *cLIPServiceClient) ImageEmbedding(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ImageChunk, EmbeddingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CLIPService_ServiceDesc.Streams[0], CLIPService_ImageEmbedding_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ImageChunk, EmbeddingResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CLIPService_ImageEmbeddingClient = grpc.ClientStreamingClient[ImageChunk, EmbeddingResponse]

func (c *cLIPServiceClient) TextEmbedding(ctx context.Context, in *Text, opts ...grpc.CallOption) (*EmbeddingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmbeddingResponse)
	err := c.cc.Invoke(ctx, CLIPService_TextEmbedding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CLIPServiceServer is the server API for CLIPService service.
// All implementations must embed UnimplementedCLIPServiceServer
// for forward compatibility.
type CLIPServiceServer interface {
	ImageEmbedding(grpc.ClientStreamingServer[ImageChunk, EmbeddingResponse]) error
	TextEmbedding(context.Context, *Text) (*EmbeddingResponse, error)
	mustEmbedUnimplementedCLIPServiceServer()
}

// UnimplementedCLIPServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCLIPServiceServer struct{}

func (UnimplementedCLIPServiceServer) ImageEmbedding(grpc.ClientStreamingServer[ImageChunk, EmbeddingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ImageEmbedding not implemented")
}
func (UnimplementedCLIPServiceServer) TextEmbedding(context.Context, *Text) (*EmbeddingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextEmbedding not implemented")
}
func (UnimplementedCLIPServiceServer) mustEmbedUnimplementedCLIPServiceServer() {}
func (UnimplementedCLIPServiceServer) testEmbeddedByValue()                     {}

// UnsafeCLIPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CLIPServiceServer will
// result in compilation errors.
type UnsafeCLIPServiceServer interface {
	mustEmbedUnimplementedCLIPServiceServer()
}

func RegisterCLIPServiceServer(s grpc.ServiceRegistrar, srv CLIPServiceServer) {
	// If the following call pancis, it indicates UnimplementedCLIPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CLIPService_ServiceDesc, srv)
}

func _CLIPService_ImageEmbedding_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CLIPServiceServer).ImageEmbedding(&grpc.GenericServerStream[ImageChunk, EmbeddingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CLIPService_ImageEmbeddingServer = grpc.ClientStreamingServer[ImageChunk, EmbeddingResponse]

func _CLIPService_TextEmbedding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Text)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLIPServiceServer).TextEmbedding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CLIPService_TextEmbedding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLIPServiceServer).TextEmbedding(ctx, req.(*Text))
	}
	return interceptor(ctx, in, info, handler)
}

// CLIPService_ServiceDesc is the grpc.ServiceDesc for CLIPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CLIPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clip.CLIPService",
	HandlerType: (*CLIPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TextEmbedding",
			Handler:    _CLIPService_TextEmbedding_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImageEmbedding",
			Handler:       _CLIPService_ImageEmbedding_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "clip.proto",
}
